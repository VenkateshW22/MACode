package com.example.usermanagementapi.model;

import jakarta.persistence.*;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import lombok.Data;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;

/**
 * Represents a user in the system with authentication and authorization details.
 * This entity maps to the 'users' table in the database and includes validation
 * constraints for data integrity.
 *
 * <p>Example usage:
 * <pre>{@code
 * User user = new User();
 * user.setName("John Doe");
 * user.setEmail("john.doe@example.com");
 * user.setPassword("SecurePass123!");
 * user.setRoles(Set.of("ROLE_USER"));
 * }</pre>
 *
 * @author User Management API Team
 * @version 1.0
 * @see jakarta.persistence.Entity
 * @see jakarta.validation.constraints
 */
@Entity
@Table(name = "users", uniqueConstraints = {
    @UniqueConstraint(columnNames = "email")
})
@Data
public class User {

    /**
     * Unique identifier for the user.
     * Automatically generated by the database upon user creation.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The full name of the user.
     * <p>
     * Constraints:
     * <ul>
     *   <li>Cannot be blank or null</li>
     *   <li>Must be between 2 and 100 characters long</li>
     * </ul>
     *
     * @see jakarta.validation.constraints.NotBlank
     * @see jakarta.validation.constraints.Size
     */
    @NotBlank(message = "Name is required")
    @Size(min = 2, max = 100, message = "Name must be between 2 and 100 characters")
    private String name;

    /**
     * The email address of the user, used for authentication and communication.
     * Must be unique across all users in the system.
     * <p>
     * Constraints:
     * <ul>
     *   <li>Cannot be blank or null</li>
     *   <li>Must be a valid email format</li>
     *   <li>Must be unique (enforced at database level)</li>
     * </ul>
     *
     * @see jakarta.validation.constraints.Email
     */
    @NotBlank(message = "Email is required")
    @Email(message = "Email should be valid")
    @Column(unique = true, nullable = false)
    private String email;

    /**
     * The user's password, stored in encrypted form.
     * <p>
     * Password requirements:
     * <ul>
     *   <li>Must be at least 8 characters long</li>
     *   <li>Must contain at least one digit (0-9)</li>
     *   <li>Must contain at least one lowercase letter (a-z)</li>
     *   <li>Must contain at least one uppercase letter (A-Z)</li>
     *   <li>Must contain at least one special character (!@#&()–[{}]:;',?/*~$^+=<>)</li>
     * </ul>
     *
     * @implNote The actual password is never stored in plain text.
     *           It is hashed using BCrypt before persistence.
     * @see org.springframework.security.crypto.password.PasswordEncoder
     */
    @NotBlank(message = "Password is required")
    @Size(min = 8, message = "Password must be at least 8 characters long")
    @Pattern(regexp = "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#&()–[{}]:;',?/*~$^+=<>]).{8,}$",
             message = "Password must contain at least one digit, one lowercase letter, one uppercase letter, and one special character")
    private String password;

    /**
     * The set of roles assigned to the user, defining their permissions.
     * <p>
     * Common roles include:
     * <ul>
     *   <li>ROLE_USER - Standard user permissions</li>
     *   <li>ROLE_ADMIN - Administrative permissions</li>
     * </ul>
     *
     * @implNote Roles are stored in a separate table 'user_roles' with a foreign key
     *           relationship to the users table.
     */
    @ElementCollection(fetch = FetchType.EAGER)
    @CollectionTable(name = "user_roles",
                    joinColumns = @JoinColumn(name = "user_id",
                                           foreignKey = @ForeignKey(name = "fk_user_roles_user")))
    @Column(name = "role", nullable = false)
    private Set<String> roles = new HashSet<>();

    /**
     * The date and time when the user account was created.
     * <p>
     * This field is automatically set when the user is first persisted
     * and cannot be modified afterwards.
     *
     * @see org.hibernate.annotations.CreationTimestamp
     */
    @Column(name = "created_at", updatable = false, nullable = false)
    @CreationTimestamp
    private LocalDateTime createdAt;

    /**
     * The date and time when the user account was last updated.
     * <p>
     * This field is automatically updated by Hibernate whenever the entity is modified.
     *
     * @see org.hibernate.annotations.UpdateTimestamp
     */
    @Column(name = "updated_at", nullable = false)
    @UpdateTimestamp
    private LocalDateTime updatedAt;

}
